#!/bin/sh
# Git hook script para executar verifica√ß√µes antes do push
# Este script executa verifica√ß√µes de qualidade antes de permitir o push

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configura√ß√µes
PROTECTED_BRANCHES="main master production"
CURRENT_BRANCH=$(git branch --show-current)
REMOTE=$1
URL=$2

echo "${BLUE}üîç Executando verifica√ß√µes pre-push...${NC}"

# Fun√ß√£o para imprimir erro e sair
print_error() {
    echo "${RED}‚ùå $1${NC}"
    exit 1
}

# Fun√ß√£o para imprimir sucesso
print_success() {
    echo "${GREEN}‚úÖ $1${NC}"
}

# Fun√ß√£o para imprimir aviso
print_warning() {
    echo "${YELLOW}‚ö†Ô∏è $1${NC}"
}

# Verificar se √© branch protegida
is_protected_branch() {
    for branch in $PROTECTED_BRANCHES; do
        if [ "$CURRENT_BRANCH" = "$branch" ]; then
            return 0
        fi
    done
    return 1
}

# Verificar se existem arquivos staged
has_staged_files() {
    git diff --cached --quiet
    return $?
}

# Executar testes unit√°rios
run_unit_tests() {
    echo "${BLUE}üß™ Executando testes unit√°rios...${NC}"
    
    if command -v python3 >/dev/null 2>&1; then
        if [ -f "requirements-test.txt" ]; then
            python3 -m pytest tests/unit/ -q --tb=short
            if [ $? -ne 0 ]; then
                print_error "Testes unit√°rios falharam"
            fi
        else
            print_warning "Arquivo requirements-test.txt n√£o encontrado"
        fi
    else
        print_warning "Python3 n√£o encontrado"
    fi
    
    print_success "Testes unit√°rios passaram"
}

# Verificar qualidade do c√≥digo
check_code_quality() {
    echo "${BLUE}üîç Verificando qualidade do c√≥digo...${NC}"
    
    # Verificar formata√ß√£o com black
    if command -v black >/dev/null 2>&1; then
        python3 -m black --check --quiet . 2>/dev/null
        if [ $? -ne 0 ]; then
            print_error "C√≥digo n√£o est√° formatado corretamente. Execute: black ."
        fi
    fi
    
    # Verificar imports com isort
    if command -v isort >/dev/null 2>&1; then
        python3 -m isort --check-only --quiet . 2>/dev/null
        if [ $? -ne 0 ]; then
            print_error "Imports n√£o est√£o organizados. Execute: isort ."
        fi
    fi
    
    # Verificar linting com flake8
    if command -v flake8 >/dev/null 2>&1; then
        python3 -m flake8 --max-line-length=100 --ignore=E203,W503 . 2>/dev/null
        if [ $? -ne 0 ]; then
            print_error "Problemas de linting encontrados. Execute: flake8 ."
        fi
    fi
    
    print_success "Qualidade do c√≥digo OK"
}

# Verificar seguran√ßa
check_security() {
    echo "${BLUE}üîí Verificando seguran√ßa...${NC}"
    
    # Verificar secrets expostos
    if command -v detect-secrets >/dev/null 2>&1; then
        detect-secrets scan --baseline .secrets.baseline . >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            print_error "Poss√≠veis secrets detectados. Verifique com: detect-secrets scan"
        fi
    fi
    
    # Verificar vulnerabilidades com bandit
    if command -v bandit >/dev/null 2>&1; then
        python3 -m bandit -r . -f json -o /tmp/bandit-report.json -q 2>/dev/null
        if [ $? -eq 1 ]; then
            print_warning "Poss√≠veis vulnerabilidades detectadas. Verifique com: bandit -r ."
        fi
    fi
    
    print_success "Verifica√ß√µes de seguran√ßa OK"
}

# Verificar tamanho dos arquivos
check_file_sizes() {
    echo "${BLUE}üìÅ Verificando tamanho dos arquivos...${NC}"
    
    # Verificar arquivos grandes (>10MB)
    large_files=$(find . -type f -size +10M -not -path "./.git/*" -not -path "./node_modules/*" 2>/dev/null)
    
    if [ -n "$large_files" ]; then
        print_warning "Arquivos grandes detectados:"
        echo "$large_files"
        echo "Considere usar Git LFS para arquivos grandes"
    fi
    
    print_success "Verifica√ß√£o de tamanho OK"
}

# Verificar commits
check_commits() {
    echo "${BLUE}üìù Verificando formato dos commits...${NC}"
    
    # Verificar se h√° commits para push
    commits_to_push=$(git rev-list --count HEAD ^origin/$CURRENT_BRANCH 2>/dev/null || echo "0")
    
    if [ "$commits_to_push" = "0" ]; then
        print_warning "Nenhum commit novo para push"
        return
    fi
    
    # Verificar formato dos commits (conventional commits)
    if command -v npx >/dev/null 2>&1 && [ -f "commitlint.config.js" ]; then
        git log --oneline origin/$CURRENT_BRANCH..HEAD | while read commit; do
            echo "$commit" | npx commitlint --from=stdin >/dev/null 2>&1
            if [ $? -ne 0 ]; then
                print_error "Commit n√£o segue padr√£o convencional: $commit"
            fi
        done
    fi
    
    print_success "Formato dos commits OK"
}

# Verificar depend√™ncias
check_dependencies() {
    echo "${BLUE}üì¶ Verificando depend√™ncias...${NC}"
    
    # Verificar se requirements.txt est√° atualizado
    if [ -f "requirements.txt" ]; then
        # Verificar se n√£o h√° depend√™ncias com vulnerabilidades conhecidas
        if command -v safety >/dev/null 2>&1; then
            python3 -m safety check --json >/dev/null 2>&1
            if [ $? -ne 0 ]; then
                print_warning "Poss√≠veis vulnerabilidades em depend√™ncias. Execute: safety check"
            fi
        fi
    fi
    
    print_success "Depend√™ncias OK"
}

# Verificar se √© push para branch protegida
check_protected_branch() {
    if is_protected_branch; then
        echo "${YELLOW}‚ö†Ô∏è Push para branch protegida: $CURRENT_BRANCH${NC}"
        
        # Verifica√ß√µes extras para branches protegidas
        echo "${BLUE}üîí Executando verifica√ß√µes extras...${NC}"
        
        # Verificar se h√° testes de integra√ß√£o
        if [ -d "tests/integration" ]; then
            echo "${BLUE}üß™ Executando testes de integra√ß√£o...${NC}"
            python3 -m pytest tests/integration/ -q --tb=short
            if [ $? -ne 0 ]; then
                print_error "Testes de integra√ß√£o falharam"
            fi
        fi
        
        # Verificar cobertura de testes
        if command -v coverage >/dev/null 2>&1; then
            echo "${BLUE}üìä Verificando cobertura de testes...${NC}"
            python3 -m coverage run -m pytest tests/ >/dev/null 2>&1
            coverage_percent=$(python3 -m coverage report | tail -1 | awk '{print $4}' | sed 's/%//')
            
            if [ "$coverage_percent" -lt 80 ]; then
                print_error "Cobertura de testes muito baixa: ${coverage_percent}% (m√≠nimo: 80%)"
            fi
        fi
        
        print_success "Verifica√ß√µes extras para branch protegida OK"
    fi
}

# Verificar se o working directory est√° limpo
check_working_directory() {
    echo "${BLUE}üßπ Verificando working directory...${NC}"
    
    if ! git diff-index --quiet HEAD --; then
        print_error "Working directory n√£o est√° limpo. Commit ou stash suas mudan√ßas"
    fi
    
    print_success "Working directory limpo"
}

# Verificar conectividade
check_connectivity() {
    echo "${BLUE}üåê Verificando conectividade...${NC}"
    
    # Verificar se consegue conectar ao remote
    git ls-remote "$URL" >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        print_error "N√£o foi poss√≠vel conectar ao reposit√≥rio remoto"
    fi
    
    print_success "Conectividade OK"
}

# Executar verifica√ß√µes baseadas no contexto
main() {
    echo "${BLUE}üìã Iniciando verifica√ß√µes pre-push para branch: $CURRENT_BRANCH${NC}"
    
    # Verifica√ß√µes b√°sicas sempre executadas
    check_working_directory
    check_connectivity
    check_file_sizes
    check_dependencies
    
    # Verifica√ß√µes de qualidade de c√≥digo
    if [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
        run_unit_tests
        check_code_quality
        check_security
    fi
    
    # Verifica√ß√µes de commit
    check_commits
    
    # Verifica√ß√µes extras para branches protegidas
    check_protected_branch
    
    echo "${GREEN}üéâ Todas as verifica√ß√µes passaram! Push permitido.${NC}"
}

# Fun√ß√£o para bypass em emerg√™ncia
emergency_bypass() {
    if [ "$EMERGENCY_PUSH" = "true" ]; then
        print_warning "BYPASS DE EMERG√äNCIA ATIVADO!"
        print_warning "Use apenas em situa√ß√µes cr√≠ticas"
        exit 0
    fi
}

# Verificar bypass de emerg√™ncia
emergency_bypass

# Verificar se deve pular verifica√ß√µes
if [ "$SKIP_HOOKS" = "true" ]; then
    print_warning "Hooks desabilitados via SKIP_HOOKS=true"
    exit 0
fi

# Executar verifica√ß√µes principais
main

# Se chegou at√© aqui, tudo OK
exit 0
